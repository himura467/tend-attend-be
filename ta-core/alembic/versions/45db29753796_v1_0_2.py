"""v1.0.2

Revision ID: 45db29753796
Revises: e2266cfe8b8a
Create Date: 2025-02-26 13:57:28.094343

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import mysql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "45db29753796"
down_revision: Union[str, None] = "e2266cfe8b8a"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade(engine_name: str) -> None:
    globals()["upgrade_%s" % engine_name]()


def downgrade(engine_name: str) -> None:
    globals()["downgrade_%s" % engine_name]()


def upgrade_common() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user_account",
        sa.Column(
            "user_id", mysql.BIGINT(unsigned=True), nullable=False, comment="User ID"
        ),
        sa.Column(
            "username", mysql.VARCHAR(length=63), nullable=False, comment="Username"
        ),
        sa.Column(
            "hashed_password",
            mysql.VARCHAR(length=512),
            nullable=False,
            comment="Hashed Password",
        ),
        sa.Column(
            "refresh_token",
            mysql.VARCHAR(length=512),
            nullable=True,
            comment="Refresh Token",
        ),
        sa.Column(
            "nickname", mysql.VARCHAR(length=63), nullable=True, comment="Nickname"
        ),
        sa.Column(
            "birth_date",
            mysql.DATETIME(timezone=True),
            nullable=False,
            comment="Birth Date",
        ),
        sa.Column(
            "gender", mysql.ENUM("MALE", "FEMALE"), nullable=False, comment="Gender"
        ),
        sa.Column(
            "email", mysql.VARCHAR(length=63), nullable=False, comment="Email Address"
        ),
        sa.Column(
            "email_verified", sa.BOOLEAN(), nullable=False, comment="Email Verified"
        ),
        sa.Column("id", sa.BINARY(length=16), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            mysql.DATETIME(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            mysql.DATETIME(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user_account")),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("user_id"),
        sa.UniqueConstraint("username"),
        info={"shard_ids": ("common",)},
        mysql_engine="InnoDB",
    )
    op.create_index(
        op.f("ix_user_account_created_at"), "user_account", ["created_at"], unique=False
    )
    op.create_index(
        op.f("ix_user_account_updated_at"), "user_account", ["updated_at"], unique=False
    )
    op.create_table(
        "email_verification",
        sa.Column("email", mysql.VARCHAR(length=63), nullable=False),
        sa.Column(
            "verification_token",
            sa.BINARY(length=16),
            nullable=False,
            comment="Verification Token",
        ),
        sa.Column(
            "token_expires_at",
            mysql.DATETIME(timezone=True),
            nullable=False,
            comment="Token Expires At",
        ),
        sa.Column("id", sa.BINARY(length=16), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            mysql.DATETIME(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            mysql.DATETIME(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["email"],
            ["user_account.email"],
            name=op.f("fk_email_verification_email_user_account"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_email_verification")),
        info={"shard_ids": ("common",)},
        mysql_engine="InnoDB",
    )
    op.create_index(
        op.f("ix_email_verification_created_at"),
        "email_verification",
        ["created_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_email_verification_updated_at"),
        "email_verification",
        ["updated_at"],
        unique=False,
    )
    op.create_table(
        "follow_association",
        sa.Column("followee_id", sa.BINARY(length=16), nullable=False),
        sa.Column("follower_id", sa.BINARY(length=16), nullable=False),
        sa.ForeignKeyConstraint(
            ["followee_id"],
            ["user_account.id"],
            name=op.f("fk_follow_association_followee_id_user_account"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["follower_id"],
            ["user_account.id"],
            name=op.f("fk_follow_association_follower_id_user_account"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "followee_id", "follower_id", name=op.f("pk_follow_association")
        ),
        info={"shard_ids": ("common",)},
        mysql_engine="InnoDB",
    )
    op.drop_index("ix_guest_account_created_at", table_name="guest_account")
    op.drop_index("ix_guest_account_updated_at", table_name="guest_account")
    op.drop_index("uq_guest_account_guest_first_name", table_name="guest_account")
    op.drop_index("user_id", table_name="guest_account")
    op.drop_table("guest_account")
    op.drop_index("ix_host_verification_created_at", table_name="host_verification")
    op.drop_index(
        "ix_host_verification_token_expires_at", table_name="host_verification"
    )
    op.drop_index("ix_host_verification_updated_at", table_name="host_verification")
    op.drop_table("host_verification")
    op.drop_index("email", table_name="host_account")
    op.drop_index("host_name", table_name="host_account")
    op.drop_index("ix_host_account_created_at", table_name="host_account")
    op.drop_index("ix_host_account_updated_at", table_name="host_account")
    op.drop_index("user_id", table_name="host_account")
    op.drop_table("host_account")
    # ### end Alembic commands ###


def downgrade_common() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "host_account",
        sa.Column(
            "host_name",
            mysql.VARCHAR(collation="utf8mb4_general_ci", length=64),
            nullable=False,
            comment="Host Name",
        ),
        sa.Column(
            "hashed_password",
            mysql.VARCHAR(collation="utf8mb4_general_ci", length=512),
            nullable=False,
            comment="Hashed Password",
        ),
        sa.Column(
            "refresh_token",
            mysql.VARCHAR(collation="utf8mb4_general_ci", length=512),
            nullable=True,
            comment="Refresh Token",
        ),
        sa.Column(
            "email",
            mysql.VARCHAR(collation="utf8mb4_general_ci", length=64),
            nullable=False,
            comment="Email Address",
        ),
        sa.Column(
            "user_id",
            mysql.BIGINT(unsigned=True),
            autoincrement=False,
            nullable=True,
            comment="User ID",
        ),
        sa.Column("id", sa.BINARY(length=16), nullable=False),
        sa.Column(
            "created_at",
            mysql.DATETIME(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            mysql.DATETIME(),
            server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        mysql_collate="utf8mb4_general_ci",
        mysql_default_charset="utf8mb4",
        mysql_engine="InnoDB",
    )
    op.create_index("user_id", "host_account", ["user_id"], unique=True)
    op.create_index(
        "ix_host_account_updated_at", "host_account", ["updated_at"], unique=False
    )
    op.create_index(
        "ix_host_account_created_at", "host_account", ["created_at"], unique=False
    )
    op.create_index("host_name", "host_account", ["host_name"], unique=True)
    op.create_index("email", "host_account", ["email"], unique=True)
    op.create_table(
        "host_verification",
        sa.Column(
            "host_email",
            mysql.VARCHAR(collation="utf8mb4_general_ci", length=64),
            nullable=False,
        ),
        sa.Column(
            "verification_token",
            sa.BINARY(length=16),
            nullable=False,
            comment="Verification Token",
        ),
        sa.Column(
            "token_expires_at",
            mysql.DATETIME(),
            nullable=False,
            comment="Token Expires At",
        ),
        sa.Column("id", sa.BINARY(length=16), nullable=False),
        sa.Column(
            "created_at",
            mysql.DATETIME(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            mysql.DATETIME(),
            server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["host_email"],
            ["host_account.email"],
            name="fk_host_verification_host_email_host_account",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id"),
        mysql_collate="utf8mb4_general_ci",
        mysql_default_charset="utf8mb4",
        mysql_engine="InnoDB",
    )
    op.create_index(
        "ix_host_verification_updated_at",
        "host_verification",
        ["updated_at"],
        unique=False,
    )
    op.create_index(
        "ix_host_verification_token_expires_at",
        "host_verification",
        ["token_expires_at"],
        unique=False,
    )
    op.create_index(
        "ix_host_verification_created_at",
        "host_verification",
        ["created_at"],
        unique=False,
    )
    op.create_table(
        "guest_account",
        sa.Column(
            "guest_first_name",
            mysql.VARCHAR(collation="utf8mb4_general_ci", length=64),
            nullable=False,
            comment="Guest First Name",
        ),
        sa.Column(
            "guest_last_name",
            mysql.VARCHAR(collation="utf8mb4_general_ci", length=64),
            nullable=False,
            comment="Guest Last Name",
        ),
        sa.Column(
            "guest_nickname",
            mysql.VARCHAR(collation="utf8mb4_general_ci", length=64),
            nullable=True,
            comment="Guest Nickname",
        ),
        sa.Column("birth_date", mysql.DATETIME(), nullable=False, comment="Birth Date"),
        sa.Column(
            "gender", mysql.ENUM("MALE", "FEMALE"), nullable=False, comment="Gender"
        ),
        sa.Column(
            "hashed_password",
            mysql.VARCHAR(collation="utf8mb4_general_ci", length=512),
            nullable=False,
            comment="Hashed Password",
        ),
        sa.Column(
            "refresh_token",
            mysql.VARCHAR(collation="utf8mb4_general_ci", length=512),
            nullable=True,
            comment="Refresh Token",
        ),
        sa.Column(
            "user_id",
            mysql.BIGINT(unsigned=True),
            autoincrement=False,
            nullable=False,
            comment="User ID",
        ),
        sa.Column("host_id", sa.BINARY(length=16), nullable=False),
        sa.Column("id", sa.BINARY(length=16), nullable=False),
        sa.Column(
            "created_at",
            mysql.DATETIME(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            mysql.DATETIME(),
            server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["host_id"],
            ["host_account.id"],
            name="fk_guest_account_host_id_host_account",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id"),
        mysql_collate="utf8mb4_general_ci",
        mysql_default_charset="utf8mb4",
        mysql_engine="InnoDB",
    )
    op.create_index("user_id", "guest_account", ["user_id"], unique=True)
    op.create_index(
        "uq_guest_account_guest_first_name",
        "guest_account",
        ["guest_first_name", "guest_last_name", "guest_nickname", "host_id"],
        unique=True,
    )
    op.create_index(
        "ix_guest_account_updated_at", "guest_account", ["updated_at"], unique=False
    )
    op.create_index(
        "ix_guest_account_created_at", "guest_account", ["created_at"], unique=False
    )
    op.drop_table("follow_association")
    op.drop_index(
        op.f("ix_email_verification_updated_at"), table_name="email_verification"
    )
    op.drop_index(
        op.f("ix_email_verification_created_at"), table_name="email_verification"
    )
    op.drop_table("email_verification")
    op.drop_index(op.f("ix_user_account_updated_at"), table_name="user_account")
    op.drop_index(op.f("ix_user_account_created_at"), table_name="user_account")
    op.drop_table("user_account")
    # ### end Alembic commands ###


def upgrade_sequence() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_sequence() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def upgrade_shard0() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "event",
        "summary",
        existing_type=mysql.VARCHAR(collation="utf8mb4_general_ci", length=64),
        type_=mysql.VARCHAR(length=63),
        existing_comment="Summary",
        existing_nullable=False,
    )
    op.alter_column(
        "event",
        "location",
        existing_type=mysql.VARCHAR(collation="utf8mb4_general_ci", length=64),
        type_=mysql.VARCHAR(length=63),
        existing_comment="Location",
        existing_nullable=True,
    )
    op.alter_column(
        "event",
        "timezone",
        existing_type=mysql.VARCHAR(collation="utf8mb4_general_ci", length=64),
        type_=mysql.VARCHAR(length=63),
        existing_comment="Timezone",
        existing_nullable=False,
    )
    op.drop_constraint("fk_event_recurrence_id_recurrence", "event", type_="foreignkey")
    op.create_foreign_key(
        op.f("fk_event_recurrence_id_recurrence"),
        "event",
        "recurrence",
        ["recurrence_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_constraint(
        "fk_recurrence_rrule_id_recurrence_rule", "recurrence", type_="foreignkey"
    )
    op.create_foreign_key(
        op.f("fk_recurrence_rrule_id_recurrence_rule"),
        "recurrence",
        "recurrence_rule",
        ["rrule_id"],
        ["id"],
        ondelete="CASCADE",
    )
    # ### end Alembic commands ###


def downgrade_shard0() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        op.f("fk_recurrence_rrule_id_recurrence_rule"), "recurrence", type_="foreignkey"
    )
    op.create_foreign_key(
        "fk_recurrence_rrule_id_recurrence_rule",
        "recurrence",
        "recurrence_rule",
        ["rrule_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.drop_constraint(
        op.f("fk_event_recurrence_id_recurrence"), "event", type_="foreignkey"
    )
    op.create_foreign_key(
        "fk_event_recurrence_id_recurrence",
        "event",
        "recurrence",
        ["recurrence_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.alter_column(
        "event",
        "timezone",
        existing_type=mysql.VARCHAR(length=63),
        type_=mysql.VARCHAR(collation="utf8mb4_general_ci", length=64),
        existing_comment="Timezone",
        existing_nullable=False,
    )
    op.alter_column(
        "event",
        "location",
        existing_type=mysql.VARCHAR(length=63),
        type_=mysql.VARCHAR(collation="utf8mb4_general_ci", length=64),
        existing_comment="Location",
        existing_nullable=True,
    )
    op.alter_column(
        "event",
        "summary",
        existing_type=mysql.VARCHAR(length=63),
        type_=mysql.VARCHAR(collation="utf8mb4_general_ci", length=64),
        existing_comment="Summary",
        existing_nullable=False,
    )
    # ### end Alembic commands ###


def upgrade_shard1() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "event",
        "summary",
        existing_type=mysql.VARCHAR(collation="utf8mb4_general_ci", length=64),
        type_=mysql.VARCHAR(length=63),
        existing_comment="Summary",
        existing_nullable=False,
    )
    op.alter_column(
        "event",
        "location",
        existing_type=mysql.VARCHAR(collation="utf8mb4_general_ci", length=64),
        type_=mysql.VARCHAR(length=63),
        existing_comment="Location",
        existing_nullable=True,
    )
    op.alter_column(
        "event",
        "timezone",
        existing_type=mysql.VARCHAR(collation="utf8mb4_general_ci", length=64),
        type_=mysql.VARCHAR(length=63),
        existing_comment="Timezone",
        existing_nullable=False,
    )
    op.drop_constraint("fk_event_recurrence_id_recurrence", "event", type_="foreignkey")
    op.create_foreign_key(
        op.f("fk_event_recurrence_id_recurrence"),
        "event",
        "recurrence",
        ["recurrence_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_constraint(
        "fk_recurrence_rrule_id_recurrence_rule", "recurrence", type_="foreignkey"
    )
    op.create_foreign_key(
        op.f("fk_recurrence_rrule_id_recurrence_rule"),
        "recurrence",
        "recurrence_rule",
        ["rrule_id"],
        ["id"],
        ondelete="CASCADE",
    )
    # ### end Alembic commands ###


def downgrade_shard1() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        op.f("fk_recurrence_rrule_id_recurrence_rule"), "recurrence", type_="foreignkey"
    )
    op.create_foreign_key(
        "fk_recurrence_rrule_id_recurrence_rule",
        "recurrence",
        "recurrence_rule",
        ["rrule_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.drop_constraint(
        op.f("fk_event_recurrence_id_recurrence"), "event", type_="foreignkey"
    )
    op.create_foreign_key(
        "fk_event_recurrence_id_recurrence",
        "event",
        "recurrence",
        ["recurrence_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.alter_column(
        "event",
        "timezone",
        existing_type=mysql.VARCHAR(length=63),
        type_=mysql.VARCHAR(collation="utf8mb4_general_ci", length=64),
        existing_comment="Timezone",
        existing_nullable=False,
    )
    op.alter_column(
        "event",
        "location",
        existing_type=mysql.VARCHAR(length=63),
        type_=mysql.VARCHAR(collation="utf8mb4_general_ci", length=64),
        existing_comment="Location",
        existing_nullable=True,
    )
    op.alter_column(
        "event",
        "summary",
        existing_type=mysql.VARCHAR(length=63),
        type_=mysql.VARCHAR(collation="utf8mb4_general_ci", length=64),
        existing_comment="Summary",
        existing_nullable=False,
    )
    # ### end Alembic commands ###
