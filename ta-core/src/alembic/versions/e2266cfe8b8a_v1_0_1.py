"""v1.0.1

Revision ID: e2266cfe8b8a
Revises: 4c15307f1702
Create Date: 2025-02-10 23:57:16.712729

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import mysql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "e2266cfe8b8a"
down_revision: Union[str, None] = "4c15307f1702"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade(engine_name: str) -> None:
    globals()["upgrade_%s" % engine_name]()


def downgrade(engine_name: str) -> None:
    globals()["downgrade_%s" % engine_name]()


def upgrade_common() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        op.f("fk_guest_account_host_id_host_account"),
        "guest_account",
        type_="foreignkey",
    )
    op.alter_column(
        "guest_account",
        "host_id",
        existing_type=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        type_=sa.BINARY(length=16),
        existing_nullable=False,
    )
    op.alter_column(
        "guest_account",
        "id",
        existing_type=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        type_=sa.BINARY(length=16),
        existing_nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "host_account",
        "id",
        existing_type=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        type_=sa.BINARY(length=16),
        existing_nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "host_verification",
        "verification_token",
        existing_type=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        type_=sa.BINARY(length=16),
        existing_comment="Verification Token",
        existing_nullable=False,
    )
    op.alter_column(
        "host_verification",
        "id",
        existing_type=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        type_=sa.BINARY(length=16),
        existing_nullable=False,
        autoincrement=False,
    )
    op.create_foreign_key(
        op.f("fk_guest_account_host_id_host_account"),
        "guest_account",
        "host_account",
        ["host_id"],
        ["id"],
        ondelete="CASCADE",
    )
    # ### end Alembic commands ###


def downgrade_common() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        op.f("fk_guest_account_host_id_host_account"),
        "guest_account",
        type_="foreignkey",
    )
    op.alter_column(
        "host_verification",
        "id",
        existing_type=sa.BINARY(length=16),
        type_=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        existing_nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "host_verification",
        "verification_token",
        existing_type=sa.BINARY(length=16),
        type_=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        existing_comment="Verification Token",
        existing_nullable=False,
    )
    op.alter_column(
        "host_account",
        "id",
        existing_type=sa.BINARY(length=16),
        type_=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        existing_nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "guest_account",
        "id",
        existing_type=sa.BINARY(length=16),
        type_=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        existing_nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "guest_account",
        "host_id",
        existing_type=sa.BINARY(length=16),
        type_=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        existing_nullable=False,
    )
    op.create_foreign_key(
        op.f("fk_guest_account_host_id_host_account"),
        "guest_account",
        "host_account",
        ["host_id"],
        ["id"],
        ondelete="CASCADE",
    )
    # ### end Alembic commands ###


def upgrade_sequence() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_sequence() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def upgrade_shard0() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        op.f("fk_event_recurrence_id_recurrence"),
        "event",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_recurrence_rrule_id_recurrence_rule"),
        "recurrence",
        type_="foreignkey",
    )
    op.alter_column(
        "event",
        "recurrence_id",
        existing_type=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        type_=sa.BINARY(length=16),
        existing_nullable=True,
    )
    op.alter_column(
        "event",
        "id",
        existing_type=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        type_=sa.BINARY(length=16),
        existing_nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "event_attendance",
        "event_id",
        existing_type=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        type_=sa.BINARY(length=16),
        existing_comment="Event ID",
        existing_nullable=False,
    )
    op.alter_column(
        "event_attendance",
        "id",
        existing_type=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        type_=sa.BINARY(length=16),
        existing_nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "event_attendance_action_log",
        "event_id",
        existing_type=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        type_=sa.BINARY(length=16),
        existing_comment="Event ID",
        existing_nullable=False,
    )
    op.alter_column(
        "event_attendance_action_log",
        "id",
        existing_type=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        type_=sa.BINARY(length=16),
        existing_nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "recurrence",
        "rrule_id",
        existing_type=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        type_=sa.BINARY(length=16),
        existing_nullable=False,
    )
    op.alter_column(
        "recurrence",
        "id",
        existing_type=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        type_=sa.BINARY(length=16),
        existing_nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "recurrence_rule",
        "id",
        existing_type=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        type_=sa.BINARY(length=16),
        existing_nullable=False,
        autoincrement=False,
    )
    op.create_foreign_key(
        op.f("fk_event_recurrence_id_recurrence"),
        "event",
        "recurrence",
        ["recurrence_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        op.f("fk_recurrence_rrule_id_recurrence_rule"),
        "recurrence",
        "recurrence_rule",
        ["rrule_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    # ### end Alembic commands ###


def downgrade_shard0() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        op.f("fk_event_recurrence_id_recurrence"),
        "event",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_recurrence_rrule_id_recurrence_rule"),
        "recurrence",
        type_="foreignkey",
    )
    op.alter_column(
        "recurrence_rule",
        "id",
        existing_type=sa.BINARY(length=16),
        type_=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        existing_nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "recurrence",
        "id",
        existing_type=sa.BINARY(length=16),
        type_=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        existing_nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "recurrence",
        "rrule_id",
        existing_type=sa.BINARY(length=16),
        type_=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        existing_nullable=False,
    )
    op.alter_column(
        "event_attendance_action_log",
        "id",
        existing_type=sa.BINARY(length=16),
        type_=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        existing_nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "event_attendance_action_log",
        "event_id",
        existing_type=sa.BINARY(length=16),
        type_=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        existing_comment="Event ID",
        existing_nullable=False,
    )
    op.alter_column(
        "event_attendance",
        "id",
        existing_type=sa.BINARY(length=16),
        type_=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        existing_nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "event_attendance",
        "event_id",
        existing_type=sa.BINARY(length=16),
        type_=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        existing_comment="Event ID",
        existing_nullable=False,
    )
    op.alter_column(
        "event",
        "id",
        existing_type=sa.BINARY(length=16),
        type_=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        existing_nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "event",
        "recurrence_id",
        existing_type=sa.BINARY(length=16),
        type_=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        existing_nullable=True,
    )
    op.create_foreign_key(
        op.f("fk_event_recurrence_id_recurrence"),
        "event",
        "recurrence",
        ["recurrence_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        op.f("fk_recurrence_rrule_id_recurrence_rule"),
        "recurrence",
        "recurrence_rule",
        ["rrule_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    # ### end Alembic commands ###


def upgrade_shard1() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        op.f("fk_event_recurrence_id_recurrence"),
        "event",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_recurrence_rrule_id_recurrence_rule"),
        "recurrence",
        type_="foreignkey",
    )
    op.alter_column(
        "event",
        "recurrence_id",
        existing_type=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        type_=sa.BINARY(length=16),
        existing_nullable=True,
    )
    op.alter_column(
        "event",
        "id",
        existing_type=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        type_=sa.BINARY(length=16),
        existing_nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "event_attendance",
        "event_id",
        existing_type=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        type_=sa.BINARY(length=16),
        existing_comment="Event ID",
        existing_nullable=False,
    )
    op.alter_column(
        "event_attendance",
        "id",
        existing_type=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        type_=sa.BINARY(length=16),
        existing_nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "event_attendance_action_log",
        "event_id",
        existing_type=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        type_=sa.BINARY(length=16),
        existing_comment="Event ID",
        existing_nullable=False,
    )
    op.alter_column(
        "event_attendance_action_log",
        "id",
        existing_type=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        type_=sa.BINARY(length=16),
        existing_nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "recurrence",
        "rrule_id",
        existing_type=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        type_=sa.BINARY(length=16),
        existing_nullable=False,
    )
    op.alter_column(
        "recurrence",
        "id",
        existing_type=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        type_=sa.BINARY(length=16),
        existing_nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "recurrence_rule",
        "id",
        existing_type=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        type_=sa.BINARY(length=16),
        existing_nullable=False,
        autoincrement=False,
    )
    op.create_foreign_key(
        op.f("fk_event_recurrence_id_recurrence"),
        "event",
        "recurrence",
        ["recurrence_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        op.f("fk_recurrence_rrule_id_recurrence_rule"),
        "recurrence",
        "recurrence_rule",
        ["rrule_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    # ### end Alembic commands ###


def downgrade_shard1() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        op.f("fk_event_recurrence_id_recurrence"),
        "event",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_recurrence_rrule_id_recurrence_rule"),
        "recurrence",
        type_="foreignkey",
    )
    op.alter_column(
        "recurrence_rule",
        "id",
        existing_type=sa.BINARY(length=16),
        type_=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        existing_nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "recurrence",
        "id",
        existing_type=sa.BINARY(length=16),
        type_=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        existing_nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "recurrence",
        "rrule_id",
        existing_type=sa.BINARY(length=16),
        type_=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        existing_nullable=False,
    )
    op.alter_column(
        "event_attendance_action_log",
        "id",
        existing_type=sa.BINARY(length=16),
        type_=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        existing_nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "event_attendance_action_log",
        "event_id",
        existing_type=sa.BINARY(length=16),
        type_=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        existing_comment="Event ID",
        existing_nullable=False,
    )
    op.alter_column(
        "event_attendance",
        "id",
        existing_type=sa.BINARY(length=16),
        type_=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        existing_nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "event_attendance",
        "event_id",
        existing_type=sa.BINARY(length=16),
        type_=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        existing_comment="Event ID",
        existing_nullable=False,
    )
    op.alter_column(
        "event",
        "id",
        existing_type=sa.BINARY(length=16),
        type_=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        existing_nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "event",
        "recurrence_id",
        existing_type=sa.BINARY(length=16),
        type_=mysql.VARCHAR(collation="utf8mb4_general_ci", length=36),
        existing_nullable=True,
    )
    op.create_foreign_key(
        op.f("fk_event_recurrence_id_recurrence"),
        "event",
        "recurrence",
        ["recurrence_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        op.f("fk_recurrence_rrule_id_recurrence_rule"),
        "recurrence",
        "recurrence_rule",
        ["rrule_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    # ### end Alembic commands ###
